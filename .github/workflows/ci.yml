name: Build and Test CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test-react:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build React Frontend
        run: docker build -t react-frontend ./app/frontend

      - name: Run and Test React Frontend
        run: |
          docker run -d --name react-app -p 3000:3000 react-frontend
          sleep 10 
          curl --fail http://localhost:3000 || exit 1
          docker stop react-app

  build-and-test-node:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: epl_prediction
        ports:
          - 5432:5432
        # Health check ensures PostgreSQL is ready before tests run
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name=postgres_container

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Node.js Dependencies
        run: npm install --prefix ./app/backend/node

      - name: Inspect Docker Environment
        run: |
          echo "=== All running containers ==="
          docker ps
          
          echo "=== Looking for PostgreSQL containers ==="
          # Try different ways to find the PostgreSQL container
          POSTGRES_CONTAINER_ID=$(docker ps -q -f ancestor=postgres:14 | head -1)
          
          if [ -z "$POSTGRES_CONTAINER_ID" ]; then
            # Try by image name containing postgres
            POSTGRES_CONTAINER_ID=$(docker ps -q -f "image=postgres" | head -1)
          fi
          
          if [ -z "$POSTGRES_CONTAINER_ID" ]; then
            # Try by container name containing postgres
            POSTGRES_CONTAINER_ID=$(docker ps --format "{{.ID}}" -f "name=postgres" | head -1)
          fi
          
          if [ -z "$POSTGRES_CONTAINER_ID" ]; then
            echo "No PostgreSQL container found, but continuing build..."
          else
            echo "Using PostgreSQL container: $POSTGRES_CONTAINER_ID"
            docker logs $POSTGRES_CONTAINER_ID || echo "Could not get logs, but continuing..."
          fi

      - name: Run Authentication Tests
        env:
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: epl_prediction
          DB_HOST: localhost
          DB_PORT: 5432
          JWT_SECRET: test_secret
        run: |
          npm test --prefix ./app/backend/node

      - name: Build Node.js Backend
        run: docker build -t node-backend ./app/backend/node

      - name: Run and Test Node.js Backend
        env:
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: epl_prediction
          DB_HOST: localhost
          DB_PORT: 5432
          JWT_SECRET: test_secret
        run: |
          docker run -d --name node-app -p 5000:5000 --network="host" node-backend
          timeout=30  
          while ! curl --fail http://localhost:5000/api/predict/test; do
            sleep 1
            timeout=$((timeout-1))
            if [ "$timeout" -le 0 ]; then
              echo "Node.js backend failed to start in time."
              docker logs node-app
              docker stop node-app
              exit 1
            fi
          done
          docker stop node-app

  build-and-test-python:
    runs-on: ubuntu-latest
    services:
      python:
        image: docker://python:3.8-slim
        ports:
          - 5001:5001
        options: --entrypoint tail

    steps:
      - uses: actions/checkout@v2

      - name: Build Python Docker Container
        run: docker build -t python-backend ./app/backend/python

      - name: Start Python Container
        run: docker run -d --name python-app -p 5001:5001 python-backend

      - name: Install Test Dependencies
        run: docker exec python-app pip install pytest

      - name: Copy Tests to Container
        run: docker cp ./app/backend/python/tests python-app:/app/tests

      - name: Run Tests in Python Container
        run: docker exec python-app pytest /app/tests

      - name: Stop Python Container
        run: docker stop python-app
