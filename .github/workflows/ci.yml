name: Build and Test CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test-react:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build React Frontend
        run: docker build -t react-frontend ./app/frontend

      - name: Run and Test React Frontend
        run: |
          docker run -d --name react-app -p 3000:3000 react-frontend
          sleep 10 
          curl --fail http://localhost:3000 || exit 1
          docker stop react-app

  build-and-test-node:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: epl_prediction
        ports:
          - 5432:5432
        # Health check ensures PostgreSQL is ready before tests run
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name=postgres_container
          
      # Mock Python API service for tests
      python-api:
        image: node:14-alpine
        ports:
          - 5001:5001
        options: >-
          --name=python-api
        env:
          NODE_ENV: test
        volumes:
          - ${{ github.workspace }}:/workspace
        command: >
          sh -c "cd /workspace && 
                 echo 'const express = require(\"express\"); 
                 const app = express(); 
                 app.use(express.json()); 
                 app.post(\"/api/predict\", (req, res) => { 
                   res.json({result: \"mocked prediction\"}); 
                 }); 
                 app.post(\"/api/predict-custom\", (req, res) => { 
                   res.json({result: \"mocked custom prediction\"}); 
                 }); 
                 app.listen(5001, () => console.log(\"Mock Python API running on port 5001\")); 
                 ' > mock-api.js && 
                 npm install express && 
                 node mock-api.js"

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Node.js Dependencies
        run: npm install --prefix ./app/backend/node

      - name: Inspect Docker Environment
        run: |
          echo "=== All running containers ==="
          docker ps
          
          echo "=== Looking for PostgreSQL containers ==="
          # Try different ways to find the PostgreSQL container
          POSTGRES_CONTAINER_ID=$(docker ps -q -f ancestor=postgres:14 | head -1)
          
          if [ -z "$POSTGRES_CONTAINER_ID" ]; then
            # Try by image name containing postgres
            POSTGRES_CONTAINER_ID=$(docker ps -q -f "image=postgres" | head -1)
          fi
          
          if [ -z "$POSTGRES_CONTAINER_ID" ]; then
            # Try by container name containing postgres
            POSTGRES_CONTAINER_ID=$(docker ps --format "{{.ID}}" -f "name=postgres" | head -1)
          fi
          
          if [ -z "$POSTGRES_CONTAINER_ID" ]; then
            echo "No PostgreSQL container found, but continuing build..."
          else
            echo "Using PostgreSQL container: $POSTGRES_CONTAINER_ID"
            docker logs $POSTGRES_CONTAINER_ID || echo "Could not get logs, but continuing..."
          fi

      - name: Run Authentication Tests
        env:
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: epl_prediction
          DB_HOST: localhost
          DB_PORT: 5432
          JWT_SECRET: test_secret
          SERVER_URL: http://localhost:5001
        run: |
          # Verify the Python mock API is accessible
          curl --retry 5 --retry-delay 2 --retry-connrefused http://localhost:5001/api/predict -X POST -H "Content-Type: application/json" -d "{}" || echo "Mock API not responding, but continuing..."
          
          # Run tests with modified timeout for better reliability
          JEST_TIMEOUT=30000 npm test --prefix ./app/backend/node

      - name: Build Node.js Backend
        run: docker build -t node-backend ./app/backend/node

      - name: Run and Test Node.js Backend
        env:
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: epl_prediction
          DB_HOST: localhost
          DB_PORT: 5432
          JWT_SECRET: test_secret
          SERVER_URL: http://localhost:5001
        run: |
          # Run with host network to ensure it can reach both PostgreSQL and the mock Python API
          docker run -d --name node-app -p 5000:5000 --network="host" \
            -e DB_USER=postgres \
            -e DB_PASSWORD=postgres \
            -e DB_NAME=epl_prediction \
            -e DB_HOST=localhost \
            -e DB_PORT=5432 \
            -e JWT_SECRET=test_secret \
            -e SERVER_URL=http://localhost:5001 \
            node-backend
          
          # Give the container more time to start up
          sleep 5
          
          # Check if the container is running
          docker ps | grep node-app || (echo "Node.js container failed to start" && exit 1)
          
          # Show logs for debugging
          docker logs node-app
          
          # Test the API endpoint with more retries
          timeout=30  
          while ! curl --fail --retry 3 http://localhost:5000/api/predict/test; do
            sleep 1
            timeout=$((timeout-1))
            if [ "$timeout" -le 0 ]; then
              echo "Node.js backend failed to respond in time."
              docker logs node-app
              docker stop node-app
              exit 1
            fi
          done
          
          docker stop node-app

  build-and-test-python:
    runs-on: ubuntu-latest
    services:
      python:
        image: docker://python:3.8-slim
        ports:
          - 5001:5001
        options: --entrypoint tail

    steps:
      - uses: actions/checkout@v2

      - name: Build Python Docker Container
        run: docker build -t python-backend ./app/backend/python

      - name: Start Python Container
        run: docker run -d --name python-app -p 5001:5001 python-backend

      - name: Install Test Dependencies
        run: docker exec python-app pip install pytest

      - name: Copy Tests to Container
        run: docker cp ./app/backend/python/tests python-app:/app/tests

      - name: Run Tests in Python Container
        run: docker exec python-app pytest /app/tests

      - name: Stop Python Container
        run: docker stop python-app
